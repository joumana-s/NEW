import fs from 'fs';
import path from 'path';

// Create test directories if they don't exist
const createTestDirectories = () => {
  const dirs = ['uploads', 'images'];
  dirs.forEach(dir => {
    const dirPath = path.join(process.cwd(), dir);
    console.log(`Creating directory: ${dirPath}`);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }
  });
};

// Create a test image file in both uploads and images directories
const createTestImage = () => {
  const testImagePaths = [
    path.join(process.cwd(), 'uploads/test.jpg'),
    path.join(process.cwd(), 'images/test.jpg')
  ];

  console.log('Creating test images at:');
  testImagePaths.forEach(path => console.log(path));

  // Create a small black 1x1 pixel JPEG
  const minimalJPEG = Buffer.from([
    0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
    0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
    0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x0b, 0x08, 0x00, 0x01, 0x00,
    0x01, 0x01, 0x01, 0x11, 0x00, 0xff, 0xc4, 0x00, 0x14, 0x00, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x03, 0xff, 0xc4, 0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xff, 0xda, 0x00, 0x08, 0x01, 0x01, 0x00, 0x00, 0x3f, 0x00, 0x37,
    0xff, 0xd9
  ]);

  testImagePaths.forEach(imagePath => {
    try {
      fs.writeFileSync(imagePath, minimalJPEG);
      console.log(`Successfully created: ${imagePath}`);
    } catch (error) {
      console.error(`Failed to create ${imagePath}:`, error);
    }
  });
};

// Setup function to be called before tests
export const setup = () => {
  createTestDirectories();
  createTestImage();
};

// Cleanup function to be called after tests
export const cleanup = () => {
  const testImagePaths = [
    path.join(process.cwd(), 'uploads/test.jpg'),
    path.join(process.cwd(), 'images/test.jpg'),
    path.join(process.cwd(), 'images/test_100x100.jpg')
  ];

  testImagePaths.forEach(imagePath => {
    try {
      if (fs.existsSync(imagePath)) {
        fs.unlinkSync(imagePath);
        console.log(`Cleaned up: ${imagePath}`);
      }
    } catch (error) {
      console.error(`Failed to clean up ${imagePath}:`, error);
    }
  });
}; 